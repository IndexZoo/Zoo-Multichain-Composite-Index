/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DebtIssuanceModuleInterface extends utils.Interface {
  contractName: "DebtIssuanceModule";
  functions: {
    "calculateTotalFees(address,uint256,bool)": FunctionFragment;
    "controller()": FunctionFragment;
    "getModuleIssuanceHooks(address)": FunctionFragment;
    "getRequiredComponentIssuanceUnits(address,uint256)": FunctionFragment;
    "getRequiredComponentRedemptionUnits(address,uint256)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,address,address)": FunctionFragment;
    "isModuleIssuanceHook(address,address)": FunctionFragment;
    "issuanceSettings(address)": FunctionFragment;
    "issue(address,uint256,address)": FunctionFragment;
    "redeem(address,uint256,address)": FunctionFragment;
    "registerToIssuanceModule(address)": FunctionFragment;
    "removeModule()": FunctionFragment;
    "unregisterFromIssuanceModule(address)": FunctionFragment;
    "updateFeeRecipient(address,address)": FunctionFragment;
    "updateIssueFee(address,uint256)": FunctionFragment;
    "updateRedeemFee(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateTotalFees",
    values: [string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleIssuanceHooks",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredComponentIssuanceUnits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredComponentRedemptionUnits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleIssuanceHook",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "issuanceSettings",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerToIssuanceModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterFromIssuanceModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRecipient",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIssueFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRedeemFee",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateTotalFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModuleIssuanceHooks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredComponentIssuanceUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredComponentRedemptionUnits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleIssuanceHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issuanceSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerToIssuanceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterFromIssuanceModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIssueFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRedeemFee",
    data: BytesLike
  ): Result;

  events: {
    "FeeRecipientUpdated(address,address)": EventFragment;
    "IssueFeeUpdated(address,uint256)": EventFragment;
    "RedeemFeeUpdated(address,uint256)": EventFragment;
    "SetTokenIssued(address,address,address,address,uint256,uint256,uint256)": EventFragment;
    "SetTokenRedeemed(address,address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeRecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssueFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemFeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenIssued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenRedeemed"): EventFragment;
}

export type FeeRecipientUpdatedEvent = TypedEvent<
  [string, string],
  { _setToken: string; _newFeeRecipient: string }
>;

export type FeeRecipientUpdatedEventFilter =
  TypedEventFilter<FeeRecipientUpdatedEvent>;

export type IssueFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { _setToken: string; _newIssueFee: BigNumber }
>;

export type IssueFeeUpdatedEventFilter = TypedEventFilter<IssueFeeUpdatedEvent>;

export type RedeemFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { _setToken: string; _newRedeemFee: BigNumber }
>;

export type RedeemFeeUpdatedEventFilter =
  TypedEventFilter<RedeemFeeUpdatedEvent>;

export type SetTokenIssuedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _setToken: string;
    _issuer: string;
    _to: string;
    _hookContract: string;
    _quantity: BigNumber;
    _managerFee: BigNumber;
    _protocolFee: BigNumber;
  }
>;

export type SetTokenIssuedEventFilter = TypedEventFilter<SetTokenIssuedEvent>;

export type SetTokenRedeemedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  {
    _setToken: string;
    _redeemer: string;
    _to: string;
    _quantity: BigNumber;
    _managerFee: BigNumber;
    _protocolFee: BigNumber;
  }
>;

export type SetTokenRedeemedEventFilter =
  TypedEventFilter<SetTokenRedeemedEvent>;

export interface DebtIssuanceModule extends BaseContract {
  contractName: "DebtIssuanceModule";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DebtIssuanceModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateTotalFees(
      _setToken: string,
      _quantity: BigNumberish,
      _isIssue: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalQuantity: BigNumber;
        managerFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    controller(overrides?: CallOverrides): Promise<[string]>;

    getModuleIssuanceHooks(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getRequiredComponentIssuanceUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    getRequiredComponentRedemptionUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    initialize(
      _setToken: string,
      _maxManagerFee: BigNumberish,
      _managerIssueFee: BigNumberish,
      _managerRedeemFee: BigNumberish,
      _feeRecipient: string,
      _managerIssuanceHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isModuleIssuanceHook(
      _setToken: string,
      _hook: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    issuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        maxManagerFee: BigNumber;
        managerIssueFee: BigNumber;
        managerRedeemFee: BigNumber;
        feeRecipient: string;
        managerIssuanceHook: string;
      }
    >;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerToIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterFromIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateIssueFee(
      _setToken: string,
      _newIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRedeemFee(
      _setToken: string,
      _newRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateTotalFees(
    _setToken: string,
    _quantity: BigNumberish,
    _isIssue: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalQuantity: BigNumber;
      managerFee: BigNumber;
      protocolFee: BigNumber;
    }
  >;

  controller(overrides?: CallOverrides): Promise<string>;

  getModuleIssuanceHooks(
    _setToken: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getRequiredComponentIssuanceUnits(
    _setToken: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber[]]>;

  getRequiredComponentRedemptionUnits(
    _setToken: string,
    _quantity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[], BigNumber[]]>;

  initialize(
    _setToken: string,
    _maxManagerFee: BigNumberish,
    _managerIssueFee: BigNumberish,
    _managerRedeemFee: BigNumberish,
    _feeRecipient: string,
    _managerIssuanceHook: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isModuleIssuanceHook(
    _setToken: string,
    _hook: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  issuanceSettings(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, string] & {
      maxManagerFee: BigNumber;
      managerIssueFee: BigNumber;
      managerRedeemFee: BigNumber;
      feeRecipient: string;
      managerIssuanceHook: string;
    }
  >;

  issue(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    _setToken: string,
    _quantity: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerToIssuanceModule(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeModule(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterFromIssuanceModule(
    _setToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeRecipient(
    _setToken: string,
    _newFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateIssueFee(
    _setToken: string,
    _newIssueFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRedeemFee(
    _setToken: string,
    _newRedeemFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateTotalFees(
      _setToken: string,
      _quantity: BigNumberish,
      _isIssue: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalQuantity: BigNumber;
        managerFee: BigNumber;
        protocolFee: BigNumber;
      }
    >;

    controller(overrides?: CallOverrides): Promise<string>;

    getModuleIssuanceHooks(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getRequiredComponentIssuanceUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    getRequiredComponentRedemptionUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber[]]>;

    initialize(
      _setToken: string,
      _maxManagerFee: BigNumberish,
      _managerIssueFee: BigNumberish,
      _managerRedeemFee: BigNumberish,
      _feeRecipient: string,
      _managerIssuanceHook: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isModuleIssuanceHook(
      _setToken: string,
      _hook: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, string] & {
        maxManagerFee: BigNumber;
        managerIssueFee: BigNumber;
        managerRedeemFee: BigNumber;
        feeRecipient: string;
        managerIssuanceHook: string;
      }
    >;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerToIssuanceModule(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeModule(overrides?: CallOverrides): Promise<void>;

    unregisterFromIssuanceModule(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateIssueFee(
      _setToken: string,
      _newIssueFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRedeemFee(
      _setToken: string,
      _newRedeemFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeRecipientUpdated(address,address)"(
      _setToken?: string | null,
      _newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;
    FeeRecipientUpdated(
      _setToken?: string | null,
      _newFeeRecipient?: null
    ): FeeRecipientUpdatedEventFilter;

    "IssueFeeUpdated(address,uint256)"(
      _setToken?: string | null,
      _newIssueFee?: null
    ): IssueFeeUpdatedEventFilter;
    IssueFeeUpdated(
      _setToken?: string | null,
      _newIssueFee?: null
    ): IssueFeeUpdatedEventFilter;

    "RedeemFeeUpdated(address,uint256)"(
      _setToken?: string | null,
      _newRedeemFee?: null
    ): RedeemFeeUpdatedEventFilter;
    RedeemFeeUpdated(
      _setToken?: string | null,
      _newRedeemFee?: null
    ): RedeemFeeUpdatedEventFilter;

    "SetTokenIssued(address,address,address,address,uint256,uint256,uint256)"(
      _setToken?: string | null,
      _issuer?: string | null,
      _to?: string | null,
      _hookContract?: null,
      _quantity?: null,
      _managerFee?: null,
      _protocolFee?: null
    ): SetTokenIssuedEventFilter;
    SetTokenIssued(
      _setToken?: string | null,
      _issuer?: string | null,
      _to?: string | null,
      _hookContract?: null,
      _quantity?: null,
      _managerFee?: null,
      _protocolFee?: null
    ): SetTokenIssuedEventFilter;

    "SetTokenRedeemed(address,address,address,uint256,uint256,uint256)"(
      _setToken?: string | null,
      _redeemer?: string | null,
      _to?: string | null,
      _quantity?: null,
      _managerFee?: null,
      _protocolFee?: null
    ): SetTokenRedeemedEventFilter;
    SetTokenRedeemed(
      _setToken?: string | null,
      _redeemer?: string | null,
      _to?: string | null,
      _quantity?: null,
      _managerFee?: null,
      _protocolFee?: null
    ): SetTokenRedeemedEventFilter;
  };

  estimateGas: {
    calculateTotalFees(
      _setToken: string,
      _quantity: BigNumberish,
      _isIssue: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    getModuleIssuanceHooks(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredComponentIssuanceUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredComponentRedemptionUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _setToken: string,
      _maxManagerFee: BigNumberish,
      _managerIssueFee: BigNumberish,
      _managerRedeemFee: BigNumberish,
      _feeRecipient: string,
      _managerIssuanceHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isModuleIssuanceHook(
      _setToken: string,
      _hook: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerToIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterFromIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateIssueFee(
      _setToken: string,
      _newIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRedeemFee(
      _setToken: string,
      _newRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateTotalFees(
      _setToken: string,
      _quantity: BigNumberish,
      _isIssue: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModuleIssuanceHooks(
      _setToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredComponentIssuanceUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredComponentRedemptionUnits(
      _setToken: string,
      _quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _setToken: string,
      _maxManagerFee: BigNumberish,
      _managerIssueFee: BigNumberish,
      _managerRedeemFee: BigNumberish,
      _feeRecipient: string,
      _managerIssuanceHook: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isModuleIssuanceHook(
      _setToken: string,
      _hook: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issuanceSettings(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      _setToken: string,
      _quantity: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerToIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeModule(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterFromIssuanceModule(
      _setToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeRecipient(
      _setToken: string,
      _newFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateIssueFee(
      _setToken: string,
      _newIssueFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRedeemFee(
      _setToken: string,
      _newRedeemFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
