/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "IController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IController__factory>;
    getContractFactory(
      name: "IIntegrationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIntegrationRegistry__factory>;
    getContractFactory(
      name: "IManagerIssuanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IManagerIssuanceHook__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IModuleIssuanceHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleIssuanceHook__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "ISetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetToken__factory>;
    getContractFactory(
      name: "ISetValuer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISetValuer__factory>;
    getContractFactory(
      name: "Controller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controller__factory>;
    getContractFactory(
      name: "IntegrationRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IntegrationRegistry__factory>;
    getContractFactory(
      name: "ModuleBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleBase__factory>;
    getContractFactory(
      name: "DebtIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtIssuanceModule__factory>;
    getContractFactory(
      name: "DebtIssuanceModuleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtIssuanceModuleV2__factory>;
    getContractFactory(
      name: "SetToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetToken__factory>;
    getContractFactory(
      name: "SetTokenCreator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenCreator__factory>;
    getContractFactory(
      name: "UniswapV2ExchangeAdapterV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ExchangeAdapterV3__factory>;
    getContractFactory(
      name: "IExchangeAdapterV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExchangeAdapterV3__factory>;
    getContractFactory(
      name: "IModuleIssuanceHookV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModuleIssuanceHookV3__factory>;
    getContractFactory(
      name: "IUniswapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router__factory>;
    getContractFactory(
      name: "ControllerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ControllerMock__factory>;
    getContractFactory(
      name: "IntegrationRegistryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IntegrationRegistryMock__factory>;
    getContractFactory(
      name: "SetTokenCreatorMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenCreatorMock__factory>;
    getContractFactory(
      name: "SetTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SetTokenMock__factory>;
    getContractFactory(
      name: "StandardTokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardTokenMock__factory>;
    getContractFactory(
      name: "IXERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IXERC20__factory>;
    getContractFactory(
      name: "UniswapV2Router02Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02Mock__factory>;
    getContractFactory(
      name: "CompositeSetIssuanceModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompositeSetIssuanceModule__factory>;
    getContractFactory(
      name: "CompositeSetIssuanceModuleHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompositeSetIssuanceModuleHook__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "IController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IController>;
    getContractAt(
      name: "IIntegrationRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIntegrationRegistry>;
    getContractAt(
      name: "IManagerIssuanceHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IManagerIssuanceHook>;
    getContractAt(
      name: "IModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IModuleIssuanceHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleIssuanceHook>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "ISetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetToken>;
    getContractAt(
      name: "ISetValuer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISetValuer>;
    getContractAt(
      name: "Controller",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controller>;
    getContractAt(
      name: "IntegrationRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IntegrationRegistry>;
    getContractAt(
      name: "ModuleBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleBase>;
    getContractAt(
      name: "DebtIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtIssuanceModule>;
    getContractAt(
      name: "DebtIssuanceModuleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtIssuanceModuleV2>;
    getContractAt(
      name: "SetToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetToken>;
    getContractAt(
      name: "SetTokenCreator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenCreator>;
    getContractAt(
      name: "UniswapV2ExchangeAdapterV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ExchangeAdapterV3>;
    getContractAt(
      name: "IExchangeAdapterV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IExchangeAdapterV3>;
    getContractAt(
      name: "IModuleIssuanceHookV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IModuleIssuanceHookV3>;
    getContractAt(
      name: "IUniswapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router>;
    getContractAt(
      name: "ControllerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ControllerMock>;
    getContractAt(
      name: "IntegrationRegistryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IntegrationRegistryMock>;
    getContractAt(
      name: "SetTokenCreatorMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenCreatorMock>;
    getContractAt(
      name: "SetTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SetTokenMock>;
    getContractAt(
      name: "StandardTokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardTokenMock>;
    getContractAt(
      name: "IXERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IXERC20>;
    getContractAt(
      name: "UniswapV2Router02Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02Mock>;
    getContractAt(
      name: "CompositeSetIssuanceModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompositeSetIssuanceModule>;
    getContractAt(
      name: "CompositeSetIssuanceModuleHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompositeSetIssuanceModuleHook>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
