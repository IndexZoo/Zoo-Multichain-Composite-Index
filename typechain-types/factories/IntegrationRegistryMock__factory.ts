/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IntegrationRegistryMock,
  IntegrationRegistryMockInterface,
} from "../IntegrationRegistryMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IController",
        name: "_controller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_adapter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_integrationName",
        type: "string",
      },
    ],
    name: "IntegrationAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_newAdapter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_integrationName",
        type: "string",
      },
    ],
    name: "IntegrationEdited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "_adapter",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_integrationName",
        type: "string",
      },
    ],
    name: "IntegrationRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_adapter",
        type: "address",
      },
    ],
    name: "addIntegration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "_names",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "_adapters",
        type: "address[]",
      },
    ],
    name: "batchAddIntegration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_modules",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "_names",
        type: "string[]",
      },
      {
        internalType: "address[]",
        name: "_adapters",
        type: "address[]",
      },
    ],
    name: "batchEditIntegration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "contract IController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "address",
        name: "_adapter",
        type: "address",
      },
    ],
    name: "editIntegration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "getIntegrationAdapter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_nameHash",
        type: "bytes32",
      },
    ],
    name: "getIntegrationAdapterWithHash",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "isValidIntegration",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_module",
        type: "address",
      },
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "removeIntegration",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620020c2380380620020c2833981810160405281019062000037919062000150565b8060006200004a6200013160201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001de565b600033905090565b6000815190506200014a81620001c4565b92915050565b6000602082840312156200016357600080fd5b6000620001738482850162000139565b91505092915050565b60006200018982620001a4565b9050919050565b60006200019d826200017c565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001cf8162000190565b8114620001db57600080fd5b50565b611ed480620001ee6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063ad1f231611610071578063ad1f231614610179578063bdf5907514610195578063d9be0e12146101b1578063e6d642c5146101cd578063f2fde38b146101fd578063f77c479114610219576100b4565b8063639a3978146100b9578063715018a6146100e95780637a3d5b2a146100f35780638da5cb5b1461010f578063a19ba6dc1461012d578063a30945cb1461015d575b600080fd5b6100d360048036038101906100ce91906116a5565b610237565b6040516100e09190611b5d565b60405180910390f35b6100f16102e9565b005b61010d60048036038101906101089190611760565b610424565b005b6101176105d5565b6040516101249190611b12565b60405180910390f35b610147600480360381019061014291906116a5565b6105fe565b6040516101549190611b12565b60405180910390f35b610177600480360381019061017291906116f9565b610681565b005b610193600480360381019061018e91906116f9565b610a3d565b005b6101af60048036038101906101aa9190611760565b610de5565b005b6101cb60048036038101906101c691906116a5565b610f96565b005b6101e760048036038101906101e29190611669565b611252565b6040516101f49190611b12565b60405180910390f35b61021760048036038101906102129190611640565b6112cd565b005b610221611477565b60405161022e9190611b78565b60405180910390f35b60008073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061029a8561149d565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905092915050565b6102f16114ae565b73ffffffffffffffffffffffffffffffffffffffff1661030f6105d5565b73ffffffffffffffffffffffffffffffffffffffff1614610365576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035c90611c35565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61042c6114ae565b73ffffffffffffffffffffffffffffffffffffffff1661044a6105d5565b73ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790611c35565b60405180910390fd5b600083519050600081116104e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e090611bd5565b60405180910390fd5b8251811461052c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052390611cb5565b60405180910390fd5b8151811461056f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056690611c55565b60405180910390fd5b60008090505b818110156105ce576105c185828151811061058c57fe5b60200260200101518583815181106105a057fe5b60200260200101518584815181106105b457fe5b6020026020010151610681565b8080600101915050610575565b5050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061064a8461149d565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6106896114ae565b73ffffffffffffffffffffffffffffffffffffffff166106a76105d5565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490611c35565b60405180910390fd5b60006107088361149d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342f6e389856040518263ffffffff1660e01b81526004016107659190611b12565b60206040518083038186803b15801561077d57600080fd5b505afa158015610791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b591906117f7565b6107f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107eb90611bb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ca90611c15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093a90611c75565b60405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f43640b154e7a2d5d196915068b6d815bb713d3263abf2a154581f32dab54890d85604051610a2f9190611b93565b60405180910390a350505050565b610a456114ae565b73ffffffffffffffffffffffffffffffffffffffff16610a636105d5565b73ffffffffffffffffffffffffffffffffffffffff1614610ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab090611c35565b60405180910390fd5b6000610ac48361149d565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342f6e389856040518263ffffffff1660e01b8152600401610b219190611b12565b60206040518083038186803b158015610b3957600080fd5b505afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7191906117f7565b610bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba790611bb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610c90576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8790611c95565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf790611c75565b60405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff167fa2dbad778187774fb7e1aa28aa65a07b1f6fc3f3ad3eea64f843dacae9ed0e008385604051610dd7929190611b2d565b60405180910390a250505050565b610ded6114ae565b73ffffffffffffffffffffffffffffffffffffffff16610e0b6105d5565b73ffffffffffffffffffffffffffffffffffffffff1614610e61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5890611c35565b60405180910390fd5b60008351905060008111610eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea190611bd5565b60405180910390fd5b82518114610eed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee490611cb5565b60405180910390fd5b81518114610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2790611c55565b60405180910390fd5b60008090505b81811015610f8f57610f82858281518110610f4d57fe5b6020026020010151858381518110610f6157fe5b6020026020010151858481518110610f7557fe5b6020026020010151610a3d565b8080600101915050610f36565b5050505050565b610f9e6114ae565b73ffffffffffffffffffffffffffffffffffffffff16610fbc6105d5565b73ffffffffffffffffffffffffffffffffffffffff1614611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990611c35565b60405180910390fd5b600061101d8261149d565b9050600073ffffffffffffffffffffffffffffffffffffffff16600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690611c95565b60405180910390fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690558073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f824b40f41a4e550651acdd3e4f51be3b80092c952b2ae347cab6930b5a6f50fc856040516112449190611b93565b60405180910390a350505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6112d56114ae565b73ffffffffffffffffffffffffffffffffffffffff166112f36105d5565b73ffffffffffffffffffffffffffffffffffffffff1614611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134090611c35565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b090611bf5565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081805190602001209050919050565b600033905090565b6000813590506114c581611e59565b92915050565b600082601f8301126114dc57600080fd5b81356114ef6114ea82611d02565b611cd5565b9150818183526020840193506020810190508385602084028201111561151457600080fd5b60005b83811015611544578161152a88826114b6565b845260208401935060208301925050600181019050611517565b5050505092915050565b600082601f83011261155f57600080fd5b813561157261156d82611d2a565b611cd5565b9150818183526020840193506020810190508360005b838110156115b8578135860161159e88826115ec565b845260208401935060208301925050600181019050611588565b5050505092915050565b6000815190506115d181611e70565b92915050565b6000813590506115e681611e87565b92915050565b600082601f8301126115fd57600080fd5b813561161061160b82611d52565b611cd5565b9150808252602083016020830185838301111561162c57600080fd5b611637838284611e06565b50505092915050565b60006020828403121561165257600080fd5b6000611660848285016114b6565b91505092915050565b6000806040838503121561167c57600080fd5b600061168a858286016114b6565b925050602061169b858286016115d7565b9150509250929050565b600080604083850312156116b857600080fd5b60006116c6858286016114b6565b925050602083013567ffffffffffffffff8111156116e357600080fd5b6116ef858286016115ec565b9150509250929050565b60008060006060848603121561170e57600080fd5b600061171c868287016114b6565b935050602084013567ffffffffffffffff81111561173957600080fd5b611745868287016115ec565b9250506040611756868287016114b6565b9150509250925092565b60008060006060848603121561177557600080fd5b600084013567ffffffffffffffff81111561178f57600080fd5b61179b868287016114cb565b935050602084013567ffffffffffffffff8111156117b857600080fd5b6117c48682870161154e565b925050604084013567ffffffffffffffff8111156117e157600080fd5b6117ed868287016114cb565b9150509250925092565b60006020828403121561180957600080fd5b6000611817848285016115c2565b91505092915050565b61182981611d9a565b82525050565b61183881611dac565b82525050565b61184781611de2565b82525050565b600061185882611d7e565b6118628185611d89565b9350611872818560208601611e15565b61187b81611e48565b840191505092915050565b6000611893601583611d89565b91507f4d7573742062652076616c6964206d6f64756c652e00000000000000000000006000830152602082019050919050565b60006118d3601983611d89565b91507f4d6f64756c6573206d757374206e6f7420626520656d707479000000000000006000830152602082019050919050565b6000611913602683611d89565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611979601b83611d89565b91507f496e746567726174696f6e2065786973747320616c72656164792e00000000006000830152602082019050919050565b60006119b9602083611d89565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b60006119f9602383611d89565b91507f4d6f64756c6520616e642061646170746572206c656e67746873206d69736d6160008301527f74636800000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611a5f601b83611d89565b91507f416461707465722061646472657373206d7573742065786973742e00000000006000830152602082019050919050565b6000611a9f601b83611d89565b91507f496e746567726174696f6e20646f6573206e6f742065786973742e00000000006000830152602082019050919050565b6000611adf602083611d89565b91507f4d6f64756c6520616e64206e616d65206c656e67746873206d69736d617463686000830152602082019050919050565b6000602082019050611b276000830184611820565b92915050565b6000604082019050611b426000830185611820565b8181036020830152611b54818461184d565b90509392505050565b6000602082019050611b72600083018461182f565b92915050565b6000602082019050611b8d600083018461183e565b92915050565b60006020820190508181036000830152611bad818461184d565b905092915050565b60006020820190508181036000830152611bce81611886565b9050919050565b60006020820190508181036000830152611bee816118c6565b9050919050565b60006020820190508181036000830152611c0e81611906565b9050919050565b60006020820190508181036000830152611c2e8161196c565b9050919050565b60006020820190508181036000830152611c4e816119ac565b9050919050565b60006020820190508181036000830152611c6e816119ec565b9050919050565b60006020820190508181036000830152611c8e81611a52565b9050919050565b60006020820190508181036000830152611cae81611a92565b9050919050565b60006020820190508181036000830152611cce81611ad2565b9050919050565b6000604051905081810181811067ffffffffffffffff82111715611cf857600080fd5b8060405250919050565b600067ffffffffffffffff821115611d1957600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611d4157600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115611d6957600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000611da582611dc2565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ded82611df4565b9050919050565b6000611dff82611dc2565b9050919050565b82818337600083830152505050565b60005b83811015611e33578082015181840152602081019050611e18565b83811115611e42576000848401525b50505050565b6000601f19601f8301169050919050565b611e6281611d9a565b8114611e6d57600080fd5b50565b611e7981611dac565b8114611e8457600080fd5b50565b611e9081611db8565b8114611e9b57600080fd5b5056fea2646970667358221220c02a3d3c49a730b21fcc033e552e28b3ae281066e7793f91a7e321a77b3a37ec64736f6c634300060a0033";

type IntegrationRegistryMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntegrationRegistryMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntegrationRegistryMock__factory extends ContractFactory {
  constructor(...args: IntegrationRegistryMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "IntegrationRegistryMock";
  }

  deploy(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IntegrationRegistryMock> {
    return super.deploy(
      _controller,
      overrides || {}
    ) as Promise<IntegrationRegistryMock>;
  }
  getDeployTransaction(
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_controller, overrides || {});
  }
  attach(address: string): IntegrationRegistryMock {
    return super.attach(address) as IntegrationRegistryMock;
  }
  connect(signer: Signer): IntegrationRegistryMock__factory {
    return super.connect(signer) as IntegrationRegistryMock__factory;
  }
  static readonly contractName: "IntegrationRegistryMock";
  public readonly contractName: "IntegrationRegistryMock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntegrationRegistryMockInterface {
    return new utils.Interface(_abi) as IntegrationRegistryMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IntegrationRegistryMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IntegrationRegistryMock;
  }
}
